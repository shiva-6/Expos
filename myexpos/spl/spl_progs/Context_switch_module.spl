alias currentPID R5;
currentPID = [SYSTEM_STATUS_TABLE + 1];

//SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;
multipush(BP);

alias process_table_entry R6;
process_table_entry = PROCESS_TABLE + currentPID * 16;

[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

alias newPID R7;

newPID = currentPID +1;
if(newPID == 16) then
newPID = 1;
endif;

alias counter R8;
counter = 0;

while(counter != 16) do
	if([PROCESS_TABLE + ( newPID * 16) + 4] == READY ||[PROCESS_TABLE + ( newPID * 16) + 4]== CREATED) then
		break;
	else
		newPID = newPID +1;
		if(newPID >= 16) then
			newPID = 0;
		endif;
		counter=counter+1;
	endif;
	endwhile;

if(counter ==16) then
newPID  = 0;
endif;

alias new_process_table R9;
new_process_table = PROCESS_TABLE + newPID * 16;

SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

[SYSTEM_STATUS_TABLE + 1] = newPID;

if([PROCESS_TABLE + ( newPID * 16) + 4] == CREATED) then
	BP=[[PROCESS_TABLE+newPID*16+11]*512];
	SP = [new_process_table + 13];
	[PROCESS_TABLE + ( newPID * 16) + 4] = RUNNING;
	[PROCESS_TABLE + ( newPID * 16) + 9] = 0;
	ireturn;
endif;

[PROCESS_TABLE + ( newPID * 16) + 4] = RUNNING;
multipop(BP);
return;

