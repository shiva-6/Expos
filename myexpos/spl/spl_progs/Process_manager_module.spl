alias functionnum R1;
alias pid R2;
alias upage R3;
pid=[SYSTEM_STATUS_TABLE+1];
alias pcb R9;
pcb =  PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16;
upage=[pcb+11];

if(functionnum == 1) then
	alias counter R2;
	alias returnval R0;
	counter=0;
	while(counter<MAX_PROC_NUM) do 
		if([PROCESS_TABLE+counter*16+4] == TERMINATED) then	
			[PROCESS_TABLE+counter*16+4]=ALLOCATED;
			[PROCESS_TABLE+counter*16+1]=counter;
			[PROCESS_TABLE+counter*16+14]=PAGE_TABLE_BASE+counter*20;
			[PROCESS_TABLE+counter*16+15]=10;
			returnval=counter;
			return;
		endif;
		counter=counter+1;
	endwhile;
	returnval = -1;
	return;
endif;

if(functionnum ==2) then
	alias counter R4;
	alias pprt R5;
	pprt=[pcb+11]*512 + 496;
	counter=0;
	while(counter<8) do
		if( ([pprt+counter*2]== SEMAPHORE) && ([pprt+counter*2+1]!=-1)) then
			R6=R4;			
			multipush(R0,R1,R2,R3,R4,R5);
			R1=7;
			R2=R6;
			R3=[SYSTEM_STATUS_TABLE+1];
			call MOD_0;
			multipop(R0,R1,R2,R3,R4,R5);
		endif;
		if( [pprt + counter*2] == FILE) then
		
			multipush(R0,R1,R2,R3,R4,R5);
			R1 = 4;
			R2 = [pprt + counter * 2 + 1];
			call MOD_3;
			multipop(R0,R1,R2,R3,R4,R5);
		endif;
		counter=counter+1;
	endwhile;
	multipush(R1,R2,R3);
	alias funnum R1;
	funnum = 2;
	alias page R2;
	page=upage;
	call MOD_2;
	multipop(R1,R2,R3);
	return;
endif;


if(functionnum==3) then
	multipush(R1,R2,R3);
	alias funcnum R1;
	alias pid R2;
	funcnum=4;
	pid=[SYSTEM_STATUS_TABLE+1];
	call MOD_1;
	funcnum=2;
	pid=[SYSTEM_STATUS_TABLE+1];
	call MOD_1;
	multipop(R1,R2,R3);
	pid=[SYSTEM_STATUS_TABLE+1];
	[PROCESS_TABLE+pid*16+4]=TERMINATED;
	if([pcb+9]!=9) then
		alias counter R10;
		counter=0;
		while(counter < 16) do
			if([PROCESS_TABLE+counter*16+4]==WAIT_PROCESS && [PROCESS_TABLE+counter*16+5]==[SYSTEM_STATUS_TABLE+1] ) then 
				[PROCESS_TABLE+counter*16+4]=READY;
			endif;
			if([PROCESS_TABLE+counter*16+2]==[SYSTEM_STATUS_TABLE+1]) then
				[PROCESS_TABLE+counter*16+2]=-1;
			endif;
			counter=counter+1;
		endwhile;
	endif;
	return;
endif;



if(functionnum == 4) then	
	[PTBR*20+0] = -1;
	[PTBR*20+1] = "0000";
	[PTBR*20+2] = -1;
	[PTBR*20+3] = "0000";
	alias counter R4;
	counter=2;
	while(counter<10) do
		if([PTBR*20+counter*2]!=-1) then
			multipush(R1,R2,R3,R4);
			alias funcnum R1;
			alias pageno R2;
			funcnum = 2;
			pageno = [PTBR*20+counter*2];
			call MOD_2;
			multipop(R1,R2,R3,R4);
		endif;
		counter=counter+1;
	endwhile;
	
	alias i R10;
	i=2;
	while(i<10) do
		if([DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+i]!=-1) then
			multipush(R0,R1,R2,R3,R4,R10);
			alias funno R1;
			alias bno R2;
			alias pid R3;
			funno=4;
			bno=[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+i];
			pid=[SYSTEM_STATUS_TABLE+1];
			call MOD_2;
			multipop(R0,R1,R2,R3,R4,R10);
		endif;
		i=i+1;
		if(i==4) then
			i=8;
		endif;
	endwhile;
	
	i=0;
	while(i<10) do
		[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+i]=-1;
		i=i+1;
	endwhile;
	return;
endif;

if(functionnum == 5) then
	alias pid R2;
	alias counter R3;
	counter = 0;
	while(counter < 60) do
		if([INODE_TABLE + counter*16 + 1] != -1) then
			multipush(R1, R2, R3, R9);
				R1 = 4;
				R2 = counter;
				R3 = [SYSTEM_STATUS_TABLE + 1];
			multipop(R1, R2, R3, R9);
		endif;
		counter = counter + 1;
	endwhile;

	counter = 2;
	while(counter < MAX_PROC_NUM) do
		if(counter !=pid && [PROCESS_TABLE + counter*16 + 4] != TERMINATED) then
			multipush(R1, R2, R3, R9);
				R1 = 3;
				R2 = counter;
			multipop(R1, R2, R3, R9);
		endif;
		counter = counter + 1;
	endwhile;

	counter = 0;
	while(counter < 60) do
		if([INODE_TABLE + counter*16 + 1] != -1) then
			multipush(R1, R2, R3, R9);
				R1 = 5;
				R2 = counter;
				R3 = [SYSTEM_STATUS_TABLE + 1];
			multipop(R1, R2, R3, R9);
		endif;
		counter = counter + 1;
	endwhile;
	return;
endif;