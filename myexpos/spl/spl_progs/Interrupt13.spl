[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13]=SP;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512-1;

alias userSP R0;
userSP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];

alias syscall R1;
syscall=[[PTBR+((userSP-5)/512)*2]*512+(userSP-5)%512];

if(syscall == 17 ) then
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=17;
	
	// getting free slot for semaphore
	alias pprt R10;
	pprt=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+496;
	alias counter R3;
	counter=0;
	while(counter<8) do
		if([pprt+counter*2]==-1) then
			break;
		endif;
		counter=counter+1;
	endwhile;
		
	// if no free slot returning -1
	if(counter==8) then
		[[PTBR+((userSP-1)/512)*2]*512+(userSP-1)%512]=-1;
		[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
		SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
		ireturn;
	endif;

	//acquiring semaphore
	multipush(R0,R1,R2,R3);
	R1=6;
	R2=[SYSTEM_STATUS_TABLE+1];
	call MOD_0;
	alias semaphore_index R4;
	semaphore_index=R0;
	multipop(R0,R1,R2,R3);
	
	//if entry is invalid then returning -2
	if(semaphore_index == -1) then
		[[PTBR+((userSP-1)/512)*2]*512+(userSP-1)%512]=-2;
		[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
		SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
		ireturn;
	endif;
	
	//otherwise filling the slot 
	[pprt+counter*2]=1;
	[pprt+counter*2+1]=semaphore_index;
	[[PTBR+((userSP-1)/512)*2]*512+(userSP-1)%512]=counter;
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
	SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
	ireturn;
endif;


if(syscall == 18) then 
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=18;
	
	// checking whteher semaphore descriptor is valid or not
	alias pprt R2;
	pprt=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+496;

	alias index R3;
	index=[[PTBR+((userSP-4)/512)*2]*512+(userSP-4)%512];
	if(index<0 || index>7 || [pprt+index*2]!=1) then
		[[PTBR+((userSP-1)/512)*2]*512+(userSP-1)%512]=-1;
		[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
		SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
		ireturn;
	endif;

	//releasing semaphore
	
	multipush(R0,R1,R2,R3);
	R1=7;
	R2=[pprt+index*2+1];
	R3=[SYSTEM_STATUS_TABLE+1];
	multipop(R0,R1,R2,R3);

	// releasing the semaphore descriptor
	[pprt+index*2]=-1;
	[[PTBR+((userSP-1)/512)*2]*512+(userSP-1)%512]=0;
	
	//returning to user mode	
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
	SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
	ireturn;
endif;


