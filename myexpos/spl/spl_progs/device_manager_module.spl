alias functionNum R1;
alias currentpid R2;

if(functionNum == 2) then
	alias pagenum R3; 
	alias blocknum R4;
	multipush(R0,R1,R2,R3,R4);
	
	alias funNum R1;
	funNum = 3;
	call MOD_0;
	
	multipop(R0,R1,R2,R3,R4);
	
	[DISK_STATUS_TABLE + 0] = 1;
	[DISK_STATUS_TABLE + 1] = 0;
	[DISK_STATUS_TABLE + 2] = pagenum;
	[DISK_STATUS_TABLE + 3] = blocknum;
	[DISK_STATUS_TABLE + 4] = currentpid;
	
	load(pagenum,blocknum);
	[PROCESS_TABLE + currentpid * 16 + 4] = WAIT_DISK;
	multipush(R0,R1,R2,R3,R4);
	call MOD_5;
	multipop(R0,R1,R2,R3,R4);
	return;
endif;

if(functionNum == 3) then
	//Acquiring terminal
	multipush(R1,R2,R3);

	alias funNum R1;
	funNum = 8;

	call MOD_0;

	multipop(R1,R2,R3);

	alias word R3;
	print word;

	//Releasing terminal
	multipush(R1,R2,R3);
	funNum = 9;

	call MOD_0;

	multipop(R1,R2,R3);

	return;
endif;

if(functionNum == 4) then
	//Acquiring terminal
	multipush(R1,R2,R3);

	alias funNum R1;
	funNum = 8;

	call MOD_0;

	multipop(R1,R2,R3);
	read;
	[PROCESS_TABLE + currentpid*16 + 4] = WAIT_TERMINAL;
	
	multipush(R1,R2,R3);
	
	call MOD_5;
	
	multipop(R1,R2,R3);
	
	alias word R3;
	alias pageno R4;
	pageno = [PTBR + 2*(word/512)]*512 + word%512;
	[pageno] = [PROCESS_TABLE + currentpid*16 + 8];  

	return;	
endif;

return;
