breakpoint;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = -1;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512 - 1;

backup;

alias userSP R8;
userSP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];

multipush(EIP);

if((EC != 0) || (userSP == PTLR*512 - 1)) then
	multipush(R8);
	
	alias funNum R1;
	alias pid R2;
	funNum = 3;
	pid = [SYSTEM_STATUS_TABLE + 1];
	
	call MOD_1;
	
	multipop(R8);
	
	call MOD_5;
endif; 

if(EPN < 4) then
	alias retval R0;
	multipush(R8);
	
	alias funNum R1;
	funNum = 1;
	
	call MOD_2;
	
	[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + 2*EPN] = retval;
	[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + 2*EPN + 1] = "1110";
	
	funNum = 1;
	
	call MOD_2;
	
	[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + 2*EPN] = retval;
	[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + 2*EPN + 1] = "1110";
	
	multipop(R8);
else
	alias retval R0;
	multipush(R8);

	alias funNum R1;
	alias blockNum R2;

	funNum = 5;
	alias InodeIndex R4;
	InodeIndex = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 7];

	[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + EPN] = [InodeIndex +8+ EPN -4];
	blockNum = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + EPN];

	call MOD_2;

	multipop(R8);

	[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + 2*EPN] = retval;
	[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + 2*EPN + 1] = "1100";
	
endif;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
multipop(EIP);

restore;

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];
SP = SP + 1;

alias phyadd R9;

phyadd = [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + 2*(SP/512)]*512 + (SP%512);
[phyadd] = EIP;

ireturn;
