//inode table
loadi(59,3);
loadi(60,4);

//disk free list
loadi(61,2);

//root file
loadi(62,5);

//library
loadi(63,13);
loadi(64,14);

//Init code 
loadi(65,7);
loadi(66,8);

//exception handler
loadi(2,15);
loadi(3,16);

//timer interrupt
loadi(4,17);
loadi(5,18);

//disk interrupt
loadi(6,19);
loadi(7,20);

//INT4
loadi(10,23);
loadi(11,24);

//INT5
loadi(12,25);
loadi(13,26);

//INT6
loadi(14,27);
loadi(15,28);

//INT7 
loadi(16,29);
loadi(17,30);

//INT8
loadi(18,31);
loadi(19,32);

//INT9
loadi(20,33);
loadi(21,34);

//INT10
loadi(22,35);
loadi(23,36);

//INT11
loadi(24,37);
loadi(25,38);

//INT13
loadi(28,41);
loadi(29,42);

//INT14
loadi(30,43);
loadi(31,44);

//INT15
loadi(32,45);
loadi(33,46);

//MOD0
loadi(40,53);
loadi(41,54);

//MOD1
loadi(42,55);
loadi(43,56);

//MOD2
loadi(44,57);
loadi(45,58);

//MOD3
loadi(46,59);
loadi(47,60);

//MOD4
loadi(48,61);
loadi(49,62);

//MOD5
loadi(50,63);
loadi(51,64);

//console interrupt 
loadi(8,21);
loadi(9,22);

//intialiseing terminal status table
[TERMINAL_STATUS_TABLE]=0;
PTBR=PAGE_TABLE_BASE+20;
PTLR=10;

//library
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

//heap
[PTBR+4]=78;
[PTBR+5]="0110";
[PTBR+6]=79;
[PTBR+7]="0110";

//code
[PTBR+8]=65;
[PTBR+9]="0100";
[PTBR+10]=66;
[PTBR+11]="0100";
[PTBR+12]=-1;
[PTBR+13]="0000";
[PTBR+14]=-1;
[PTBR+15]="0000";

//Stack
[PTBR+16]=76;
[PTBR+17]="0110";
[PTBR+18]=77;
[PTBR+19]="0110";

//setting process table for init
[PROCESS_TABLE+16+11]=80;
[PROCESS_TABLE+16+1]=1;
[PROCESS_TABLE+16+4]=CREATED;
[PROCESS_TABLE+16+13]=8*512;
[PROCESS_TABLE+16+12]=0;
[PROCESS_TABLE+16+14]=PTBR;
[PROCESS_TABLE+16+15]=PTLR;
[PROCESS_TABLE+16+3]=1;


//setting up user stack
[76*512]=[65*512+1];


alias counter R10;
counter=2;
while(counter<16) do
	[PROCESS_TABLE+16*counter+4]=TERMINATED;
	counter=counter+1;
endwhile;

counter=0;
while(counter<128)do
	if(counter<=90)then
	 [MEMORY_FREE_LIST+counter]=1;
	else
	 [MEMORY_FREE_LIST+counter]=0;
	endif;
	counter=counter+1;
endwhile;

[SYSTEM_STATUS_TABLE+2]=37;
[SYSTEM_STATUS_TABLE+3]=0;
[DISK_STATUS_TABLE]=0;

alias i R10;
i=0;
while(i<16) do
	[81*512-16+i]=-1;
	i=i+1;
endwhile;

i=0;
while(i<10) do 
	[DISK_MAP_TABLE+10+i]=-1;
	i=i+1;
endwhile;

i=0;
while(i < MAX_SEM_COUNT) do
	[SEMAPHORE_TABLE+i*4]=-1;
	[SEMAPHORE_TABLE+i*4+1]=0;
	i = i+1;
endwhile;
[DISK_MAP_TABLE+10+4]=7;
[DISK_MAP_TABLE+10+5]=8;

//Initialising File Status Table
i=0;
while(i < 60) do
	[FILE_STATUS_TABLE + i*4 + 0] = -1;
	[FILE_STATUS_TABLE + i*4 + 1] = -1;
	i = i + 1;
endwhile;

//Initialising Buffer Table
i=0;
while(i < 4) do
	[BUFFER_TABLE + i*4 + 0] = -1;
	[BUFFER_TABLE + i*4 + 1] = 0;
	[BUFFER_TABLE + i*4 + 2] = -1;
	i = i + 1;
endwhile;

//Initialising Open File Table
i=0;
while(i < MAX_OPENFILE_NUM) do
	[OPEN_FILE_TABLE + i*4 + 0] = -1;
	[OPEN_FILE_TABLE + i*4 + 1] = -1;
	[OPEN_FILE_TABLE + i*4 + 2] = -1;
	[OPEN_FILE_TABLE + i*4 + 3] = -1;
	i = i + 1;
endwhile;

return;

