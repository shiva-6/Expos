//Preprocessing

alias Process_Table R0;

Process_Table = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;

//Switching to kernel Stack

[Process_Table + 9] = 5;

[Process_Table + 13] = SP;

SP = [Process_Table + 11]*512 - 1;

alias UserSP R1;

UserSP = [Process_Table + 13];

alias File_Descriptor R2;

File_Descriptor = [[PTBR + 2*(UserSP - 4)/512]*512 + (UserSP - 4)%512];

alias Return_val R3;

Return_val = [PTBR + 2*(UserSP - 1)/512]*512 + (UserSP - 1)%512;


//If the word is to be written to STDOUT 

if(File_Descriptor == -2) then

    R3 = [[PTBR + 2*(UserSP - 3)/512]*512 + (UserSP - 3)%512];

    R2 = [SYSTEM_STATUS_TABLE + 1];

    R1 = 3;

    call MOD_4;

    SP = [Process_Table + 13];

    [Process_Table + 9] = 0;

    [Return_val] = 0;

    ireturn;

endif;


//If the file descriptor is invalid

if(File_Descriptor < 0  ||  File_Descriptor > 7) then

    SP = [Process_Table + 13];

    [Process_Table + 9] = 0;

    [Return_val] = -1;

    ireturn;

endif;


//Locating Per Process Resource Table

alias Per_Proc_ResTble R4;

Per_Proc_ResTble = [Per_Proc_ResTble + 11]*512 + 496;


//If the Resource Identifier field is invalid

if([Per_Proc_ResTble + 2*File_Descriptor] != FILE) then

    SP = UserSP;

    [Process_Table + 9] = 0;

    [Return_val] = -1;

    ireturn;
 
endif;


//Acquiring Openfile Index

alias Openfile_Index R5;

Openfile_Index = [Per_Proc_ResTble + 2*File_Descriptor + 1];


//Acquiring Inode table Index

alias Inodetable_Index R6;

Inodetable_Index = [OPEN_FILE_TABLE + 4*Openfile_Index];


//If current user doesnt own the file

if(([Process_Table + 3] != 1)  &&  ([INODE_TABLE + Inodetable_Index*16 + 3] != [Process_Table + 3])  &&  ([INODE_TABLE + Inodetable_Index*16 + 4] == 0)) then

    SP = [Process_Table + 13];

    [Process_Table + 9] = 0;

    [Return_val] = -3;

    ireturn;

endif;


//Acquiring Inode 

multipush(R0,R1,R2,R3);

R1 = 4;

R2 = Inodetable_Index;

R3 = [SYSTEM_STATUS_TABLE + 1];

call MOD_0;

if(R0 == -1) then

    SP = [Process_Table + 13];

    [Process_Table + 9] = 0;

    [Return_val] = -1;

    ireturn;

endif;

multipop(R0,R1,R2,R3);


//Acquiring lseek Position

alias Lseek R7;

Lseek = [OPEN_FILE_TABLE + Openfile_Index*4 + 2];

if(Lseek == MAX_FILE_SIZE) then

    multipush(R0,R1,R2,R3,R4);

    R1 = 5;

    R2 = Inodetable_Index;

    R3 = [SYSTEM_STATUS_TABLE + 1];

    call MOD_0;

    multipop(R0,R1,R2,R3,R4);

    SP = [Process_Table + 13];

    [Process_Table + 9] = 0;

    [Return_val] = -2;

    ireturn;

endif;


//If lseek if multiple of 512 and its size didnt overshoot 

if(Lseek%512 == 0  &&  [INODE_TABLE + Inodetable_Index*16 + 2] == Lseek) then

    multipush(R0,R1,R2,R3);

    R1 = 3;

    call MOD_2;

    if(R0 == -1) then

        multipush(R0);

        R1 = 5;

        R2 = Inodetable_Index;

        R3 = [SYSTEM_STATUS_TABLE + 1];

        call MOD_0;

        multipop(R0);

        SP = [Process_Table + 13];

        [Process_Table + 9] = 0;

        [Return_val] = -2;

        ireturn;

    endif;

    alias Free_Block R8;

    Free_Block = R0;

    multipop(R0,R1,R2,R3);

    [INODE_TABLE + Inodetable_Index*16 + 8 + Lseek/512] = Free_Block;

endif;


//Getting arguments for Buffered written

alias Disk_BlockNo R9;

alias Offset R10;

Disk_BlockNo = [INODE_TABLE + Inodetable_Index*16 + 8 + Lseek/512];

Offset = Lseek%512;


//Calling Buffered Write

multipush(R0,R1,R2,R3,R4,R5);

R1 = 1;

R2 = Disk_BlockNo;

R3 = Offset;

R4 = [[PTBR + 2*(UserSP - 3)/512]*512 + (UserSP - 3)%512];

call MOD_3;

multipop(R0,R1,R2,R3,R4,R5);


alias Temp_Inode R11;

Temp_Inode = INODE_TABLE + Inodetable_Index*16 + 2;

if(Lseek == [Temp_Inode]) then

    [Temp_Inode] = [Temp_Inode] + 512;

    [ROOT_FILE + Inodetable_Index*8 + 1] = [Temp_Inode];

endif;

[OPEN_FILE_TABLE + Openfile_Index*4 + 2] = Lseek + 1;


//Releasing Inode

multipush(R0,R1,R2,R3,R4,R5);

    R1 = 5;

    R2 = Inodetable_Index;

    R3 = [SYSTEM_STATUS_TABLE + 1];

    call MOD_0;

multipop(R0,R1,R2,R3,R4,R5);

SP = [Process_Table + 13];

[Process_Table + 9] = 0;

[Return_val] = 0;

ireturn;