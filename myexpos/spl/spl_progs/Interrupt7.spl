//Preprocessing

alias Process_Table R0;

Process_Table = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;

//Switching to kernel Stack

[Process_Table + 9] = 5;

[Process_Table + 13] = SP;

SP = [Process_Table + 11]*512 - 1;

alias UserSP R1;

UserSP = [Process_Table + 13];

alias File_Descriptor R2;

File_Descriptor = [PTBR + 2*(UserSP - 4)/512]*512 + (UserSP - 4)%512;

alias Return_val R3;

Return_val = [PTBR + 2*(UserSP - 1)/512]*512 + (UserSP - 1)%512;


//If the word is to be written to STDOUT 

if(File_Descriptor == -2) then

    alias Function_Num R1;

    alias Pid R2;

    alias Word R3;

    Word = [PTBR + 2*(UserSP - 3)/512]*512 + (UserSP - 3)%512;

    Pid = [SYSTEM_STATUS_TABLE + 1];

    Function_Num = 3;

    call MOD_4;

    SP = [Process_Table + 13];

    [Process_Table + 9] = 0;

    Return_val = 0;

endif;


//If the file descriptor is invalid

if(File_Descriptor < 0  ||  File_Descriptor > 7) then

    SP = [Process_Table + 13];

    [Process_Table + 9] = 0;

    Return_val = -1;

endif;


//Locating Per Process Resource Table

alias Per_Proc_ResTble R4;

Per_Proc_ResTble = [Per_Proc_ResTble + 11]*512 + 496;


//If the Resource Identifier field is invalid

if([Per_Proc_ResTble + 2*File_Descriptor] != FILE) then

    SP = UserSP;

    [Process_Table + 9] = 0;

    Return_val = -1;
 
endif;


//Acquiring Openfile Index

alias Openfile_Index R5;

Openfile_Index = [Per_Proc_ResTble + 2*File_Descriptor + 1];


//Acquiring Inode table Index

alias Inodetable_Index R6;

Inodetable_Index = [OPEN_FILE_TABLE + 4*Openfile_Index];


